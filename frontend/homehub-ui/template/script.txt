// Mobile menu functionality
const mobileMenuToggle = document.querySelector('.mobile-menu-toggle');
const navContent = document.querySelector('.nav-content');

mobileMenuToggle.addEventListener('click', function() {
    this.classList.toggle('active');
    navContent.classList.toggle('active');
});

// Close menu when clicking on a link
const navLinks = document.querySelectorAll('.nav-menu a');
navLinks.forEach(link => {
    link.addEventListener('click', function() {
        mobileMenuToggle.classList.remove('active');
        navContent.classList.remove('active');
    });
});

// Close menu when clicking outside
document.addEventListener('click', function(e) {
    if (!mobileMenuToggle.contains(e.target) && !navContent.contains(e.target)) {
        mobileMenuToggle.classList.remove('active');
        navContent.classList.remove('active');
    }
});

// Scroll animations
const observerOptions = {
    threshold: 0.1,
    rootMargin: '0px 0px -50px 0px'
};

const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
        if (entry.isIntersecting) {
            entry.target.style.opacity = '1';
            entry.target.style.transform = 'translateY(0)';
        }
    });
}, observerOptions);

// Observe cards for animation
document.querySelectorAll('.card').forEach((card, index) => {
    card.style.opacity = '0';
    card.style.transform = 'translateY(30px)';
    card.style.transition = `all 0.6s ease ${index * 0.1}s`;
    observer.observe(card);
});

// Smooth scroll for navigation links
document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function (e) {
        e.preventDefault();
        const target = document.querySelector(this.getAttribute('href'));
        if (target) {
            target.scrollIntoView({
                behavior: 'smooth',
                block: 'start'
            });
        }
    });
});

// Parallax effect for hero section
window.addEventListener('scroll', () => {
    const scrolled = window.pageYOffset;
    const hero = document.querySelector('.hero');
    if (hero) {
        hero.style.transform = `translateY(${scrolled * 0.5}px)`;
    }
});

// Form functionality
document.querySelectorAll('form').forEach(form => {
    form.addEventListener('submit', function(e) {
        e.preventDefault();
        
        // Simple form validation
        const inputs = this.querySelectorAll('input[required], select[required], textarea[required]');
        let isValid = true;
        
        inputs.forEach(input => {
            if (!input.value.trim()) {
                isValid = false;
                input.style.borderColor = '#e74c3c';
                input.style.boxShadow = '0 0 0 3px rgba(231, 76, 60, 0.1)';
            } else {
                input.style.borderColor = '#e1e5e9';
                input.style.boxShadow = 'none';
            }
        });
        
        if (isValid) {
            // Show success message
            const button = this.querySelector('button[type="submit"]');
            const originalText = button.textContent;
            button.textContent = 'Изпращане...';
            button.disabled = true;
            
            setTimeout(() => {
                button.textContent = 'Успешно!';
                button.style.background = 'linear-gradient(135deg, #27ae60, #2ecc71)';
                
                setTimeout(() => {
                    button.textContent = originalText;
                    button.disabled = false;
                    button.style.background = '';
                    this.reset();
                }, 2000);
            }, 1500);
        }
    });
});

// File upload preview
const fileInput = document.getElementById('profile-image');
if (fileInput) {
    fileInput.addEventListener('change', function(e) {
        const file = e.target.files[0];
        if (file) {
            const label = this.nextElementSibling;
            const uploadText = label.querySelector('.upload-text');
            uploadText.textContent = file.name;
            label.style.borderColor = '#27ae60';
            label.style.background = 'rgba(39, 174, 96, 0.05)';
        }
    });
}

// Password confirmation validation
const passwordInput = document.getElementById('register-password');
const confirmInput = document.getElementById('register-confirm');

if (passwordInput && confirmInput) {
    confirmInput.addEventListener('input', function() {
        if (this.value !== passwordInput.value) {
            this.style.borderColor = '#e74c3c';
            this.style.boxShadow = '0 0 0 3px rgba(231, 76, 60, 0.1)';
        } else {
            this.style.borderColor = '#27ae60';
            this.style.boxShadow = '0 0 0 3px rgba(39, 174, 96, 0.1)';
        }
    });
}

// Range slider functionality
const budgetSlider = document.getElementById('contact-budget');
const budgetValue = document.getElementById('budget-value');

if (budgetSlider && budgetValue) {
    budgetSlider.addEventListener('input', function() {
        const value = parseInt(this.value);
        budgetValue.textContent = value.toLocaleString('bg-BG');
    });
}

// Multiple file upload preview
const contactFilesInput = document.getElementById('contact-files');
if (contactFilesInput) {
    contactFilesInput.addEventListener('change', function(e) {
        const files = Array.from(e.target.files);
        const label = this.nextElementSibling;
        const uploadText = label.querySelector('.upload-text');
        
        if (files.length > 0) {
            const fileNames = files.map(file => file.name).join(', ');
            uploadText.textContent = `Избрани файлове: ${files.length}`;
            label.style.borderColor = '#27ae60';
            label.style.background = 'rgba(39, 174, 96, 0.05)';
        } else {
            uploadText.textContent = 'Избери файлове (PDF, DOC, изображения, ZIP)';
            label.style.borderColor = '#e1e5e9';
            label.style.background = 'rgba(255, 255, 255, 0.5)';
        }
    });
}

// Phone number formatting
const phoneInput = document.getElementById('contact-phone');
if (phoneInput) {
    phoneInput.addEventListener('input', function(e) {
        let value = e.target.value.replace(/\D/g, '');
        
        if (value.length > 0) {
            if (value.startsWith('359')) {
                value = '+' + value;
            } else if (value.startsWith('0')) {
                value = '+359' + value.substring(1);
            } else if (!value.startsWith('+')) {
                value = '+359' + value;
            }
        }
        
        e.target.value = value;
    });
}

// Date picker minimum date (today)
const dateInput = document.getElementById('contact-date');
if (dateInput) {
    const today = new Date().toISOString().split('T')[0];
    dateInput.min = today;
}

// Form reset functionality
document.querySelectorAll('form').forEach(form => {
    const resetButton = form.querySelector('button[type="reset"]');
    if (resetButton) {
        resetButton.addEventListener('click', function() {
            setTimeout(() => {
                // Reset custom styling
                form.querySelectorAll('input, select, textarea').forEach(input => {
                    input.style.borderColor = '#e1e5e9';
                    input.style.boxShadow = 'none';
                });
                
                // Reset file upload labels
                form.querySelectorAll('.file-label').forEach(label => {
                    const uploadText = label.querySelector('.upload-text');
                    if (uploadText) {
                        uploadText.textContent = uploadText.getAttribute('data-original') || 'Избери файлове';
                    }
                    label.style.borderColor = '#e1e5e9';
                    label.style.background = 'rgba(255, 255, 255, 0.5)';
                });
                
                // Reset range slider
                const budgetSlider = form.querySelector('#contact-budget');
                const budgetValue = form.querySelector('#budget-value');
                if (budgetSlider && budgetValue) {
                    budgetSlider.value = 10000;
                    budgetValue.textContent = '10,000';
                }
            }, 100);
        });
    }
});

// Priority radio button styling
document.querySelectorAll('input[name="priority"]').forEach(radio => {
    radio.addEventListener('change', function() {
        // Remove active class from all labels
        document.querySelectorAll('.radio-label').forEach(label => {
            label.classList.remove('active');
        });
        
        // Add active class to selected label
        if (this.checked) {
            this.closest('.radio-label').classList.add('active');
        }
    });
});

// Back to Top functionality
const backToTopButton = document.getElementById('back-to-top');

// Show/hide button based on scroll position
window.addEventListener('scroll', () => {
    const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
    
    if (scrollTop > 300) {
        backToTopButton.classList.add('visible');
        
        // Add pulse animation when first appearing
        if (!backToTopButton.classList.contains('pulse')) {
            backToTopButton.classList.add('pulse');
            setTimeout(() => {
                backToTopButton.classList.remove('pulse');
            }, 2000);
        }
    } else {
        backToTopButton.classList.remove('visible');
    }
});

// Smooth scroll to top when button is clicked
backToTopButton.addEventListener('click', (e) => {
    e.preventDefault();
    
    // Add click animation
    backToTopButton.style.transform = 'scale(0.9)';
    setTimeout(() => {
        backToTopButton.style.transform = '';
    }, 150);
    
    // Smooth scroll to top
    window.scrollTo({
        top: 0,
        behavior: 'smooth'
    });
    
    // Focus management for accessibility
    setTimeout(() => {
        document.querySelector('.header').focus();
    }, 1000);
});

// Keyboard accessibility
backToTopButton.addEventListener('keydown', (e) => {
    if (e.key === 'Enter' || e.key === ' ') {
        e.preventDefault();
        backToTopButton.click();
    }
});

// Hide button when user is at the top
window.addEventListener('scroll', () => {
    const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
    
    if (scrollTop === 0) {
        backToTopButton.classList.remove('visible');
    }
});

// Carousel functionality
class Carousel {
    constructor() {
        this.track = document.querySelector('.carousel-track');
        this.cards = document.querySelectorAll('.family-card');
        this.dots = document.querySelectorAll('.dot');
        this.prevBtn = document.querySelector('.prev-btn');
        this.nextBtn = document.querySelector('.next-btn');
        
        this.currentSlide = 0;
        this.slidesPerView = this.getSlidesPerView();
        this.totalSlides = this.cards.length;
        this.maxSlide = this.totalSlides - this.slidesPerView;
        
        this.init();
    }
    
    getSlidesPerView() {
        if (window.innerWidth <= 480) return 1;
        if (window.innerWidth <= 768) return 2;
        return 3;
    }
    
    init() {
        this.updateButtons();
        this.bindEvents();
        this.updateDots();
    }
    
    bindEvents() {
        this.prevBtn.addEventListener('click', () => this.prev());
        this.nextBtn.addEventListener('click', () => this.next());
        
        this.dots.forEach((dot, index) => {
            dot.addEventListener('click', () => this.goToSlide(index));
        });
        
        // Keyboard navigation
        document.addEventListener('keydown', (e) => {
            if (e.key === 'ArrowLeft') this.prev();
            if (e.key === 'ArrowRight') this.next();
        });
        
        // Touch/swipe support
        let startX = 0;
        let endX = 0;
        
        this.track.addEventListener('touchstart', (e) => {
            startX = e.touches[0].clientX;
        });
        
        this.track.addEventListener('touchend', (e) => {
            endX = e.changedTouches[0].clientX;
            this.handleSwipe(startX, endX);
        });
        
        // Resize handling
        window.addEventListener('resize', () => {
            this.slidesPerView = this.getSlidesPerView();
            this.maxSlide = this.totalSlides - this.slidesPerView;
            this.goToSlide(0);
        });
    }
    
    handleSwipe(startX, endX) {
        const swipeThreshold = 50;
        const diff = startX - endX;
        
        if (Math.abs(diff) > swipeThreshold) {
            if (diff > 0) {
                this.next();
            } else {
                this.prev();
            }
        }
    }
    
    prev() {
        if (this.currentSlide > 0) {
            this.currentSlide--;
            this.updateCarousel();
        }
    }
    
    next() {
        if (this.currentSlide < this.maxSlide) {
            this.currentSlide++;
            this.updateCarousel();
        }
    }
    
    goToSlide(slideIndex) {
        this.currentSlide = Math.max(0, Math.min(slideIndex, this.maxSlide));
        this.updateCarousel();
    }
    
    updateCarousel() {
        const cardWidth = this.cards[0].offsetWidth + 32; // Including gap
        const translateX = -this.currentSlide * cardWidth;
        
        this.track.style.transform = `translateX(${translateX}px)`;
        this.updateButtons();
        this.updateDots();
    }
    
    updateButtons() {
        this.prevBtn.disabled = this.currentSlide === 0;
        this.nextBtn.disabled = this.currentSlide >= this.maxSlide;
    }
    
    updateDots() {
        this.dots.forEach((dot, index) => {
            dot.classList.toggle('active', index === this.currentSlide);
        });
    }
}

// Initialize carousel when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    if (document.querySelector('.carousel-track')) {
        new Carousel();
    }
});

// Finance section functionality
document.addEventListener('DOMContentLoaded', function() {
    // Finance card actions
    const viewButtons = document.querySelectorAll('.btn-view');
    const editButtons = document.querySelectorAll('.btn-edit');
    
    viewButtons.forEach(button => {
        button.addEventListener('click', function(e) {
            e.preventDefault();
            const id = this.getAttribute('data-id');
            console.log(`Viewing finance record with ID: ${id}`);
            
            // Add visual feedback
            this.style.transform = 'scale(0.95)';
            setTimeout(() => {
                this.style.transform = '';
            }, 150);
            
            // Here you would typically open a modal or navigate to detail page
            alert(`Преглед на финансов запис с ID: ${id}`);
        });
    });
    
    editButtons.forEach(button => {
        button.addEventListener('click', function(e) {
            e.preventDefault();
            const id = this.getAttribute('data-id');
            console.log(`Editing finance record with ID: ${id}`);
            
            // Add visual feedback
            this.style.transform = 'scale(0.95)';
            setTimeout(() => {
                this.style.transform = '';
            }, 150);
            
            // Here you would typically open an edit modal or navigate to edit page
            alert(`Редактиране на финансов запис с ID: ${id}`);
        });
    });
    
    // Pagination functionality
    const paginationContainer = document.querySelector('.pagination');
    if (!paginationContainer) return;
    
    const firstBtn = paginationContainer.querySelector('.pagination-btn.first');
    const prevBtn = paginationContainer.querySelector('.pagination-btn.prev');
    const nextBtn = paginationContainer.querySelector('.pagination-btn.next');
    const lastBtn = paginationContainer.querySelector('.pagination-btn.last');
    const pageNumbers = paginationContainer.querySelectorAll('.page-number');
    const paginationInfo = document.querySelector('.pagination-info span');
    
    let currentPage = 1;
    const totalPages = 3; // This would come from your API
    const itemsPerPage = 6;
    const totalItems = 18; // This would come from your API
    
    function updatePagination() {
        // Update page numbers
        pageNumbers.forEach((pageNum, index) => {
            pageNum.classList.toggle('active', index + 1 === currentPage);
        });
        
        // Update navigation buttons
        firstBtn.disabled = currentPage === 1;
        prevBtn.disabled = currentPage === 1;
        nextBtn.disabled = currentPage === totalPages;
        lastBtn.disabled = currentPage === totalPages;
        
        // Update info text
        const startItem = (currentPage - 1) * itemsPerPage + 1;
        const endItem = Math.min(currentPage * itemsPerPage, totalItems);
        paginationInfo.textContent = `Показване на ${startItem}-${endItem} от ${totalItems} записа`;
        
        // Add visual feedback
        paginationContainer.style.transform = 'scale(0.98)';
        setTimeout(() => {
            paginationContainer.style.transform = '';
        }, 150);
    }
    
    function goToPage(page) {
        if (page < 1 || page > totalPages) return;
        currentPage = page;
        updatePagination();
        
        // Here you would typically fetch new data from your API
        console.log(`Loading page ${page}`);
        
        // Simulate loading
        const financeGrid = document.querySelector('.finance-grid');
        if (financeGrid) {
            financeGrid.style.opacity = '0.5';
            setTimeout(() => {
                financeGrid.style.opacity = '1';
            }, 300);
        }
    }
    
    // Event listeners for pagination
    firstBtn?.addEventListener('click', () => goToPage(1));
    prevBtn?.addEventListener('click', () => goToPage(currentPage - 1));
    nextBtn?.addEventListener('click', () => goToPage(currentPage + 1));
    lastBtn?.addEventListener('click', () => goToPage(totalPages));
    
    pageNumbers.forEach((pageNum, index) => {
        pageNum.addEventListener('click', () => goToPage(index + 1));
    });
    
    // Keyboard navigation for pagination
    document.addEventListener('keydown', (e) => {
        if (e.target.closest('.pagination')) {
            if (e.key === 'ArrowLeft' && !prevBtn.disabled) {
                goToPage(currentPage - 1);
            } else if (e.key === 'ArrowRight' && !nextBtn.disabled) {
                goToPage(currentPage + 1);
            } else if (e.key === 'Home') {
                goToPage(1);
            } else if (e.key === 'End') {
                goToPage(totalPages);
            }
        }
    });
    
    // Initialize pagination
    updatePagination();
    
    // Add hover effects for pagination buttons
    const paginationButtons = paginationContainer.querySelectorAll('button');
    paginationButtons.forEach(button => {
        button.addEventListener('mouseenter', function() {
            if (!this.disabled) {
                this.style.transform = 'translateY(-2px)';
            }
        });
        
        button.addEventListener('mouseleave', function() {
            this.style.transform = '';
        });
    });
});

// Finance Detail Section functionality
document.addEventListener('DOMContentLoaded', function() {
    // Edit detail button
    const editDetailButtons = document.querySelectorAll('.btn-edit-detail');
    editDetailButtons.forEach(button => {
        button.addEventListener('click', function(e) {
            e.preventDefault();
            const id = this.getAttribute('data-id');
            console.log(`Editing finance detail with ID: ${id}`);
            
            // Add visual feedback
            this.style.transform = 'scale(0.95)';
            setTimeout(() => {
                this.style.transform = '';
            }, 150);
            
            // Here you would typically open an edit modal or navigate to edit page
            alert(`Редактиране на финансов запис с ID: ${id}`);
        });
    });
    
    // Delete button
    const deleteButtons = document.querySelectorAll('.btn-delete');
    deleteButtons.forEach(button => {
        button.addEventListener('click', function(e) {
            e.preventDefault();
            const id = this.getAttribute('data-id');
            console.log(`Deleting finance record with ID: ${id}`);
            
            // Add visual feedback
            this.style.transform = 'scale(0.95)';
            setTimeout(() => {
                this.style.transform = '';
            }, 150);
            
            // Show confirmation dialog
            if (confirm('Сигурни ли сте, че искате да изтриете този финансов запис? Това действие не може да бъде отменено.')) {
                // Here you would typically make API call to delete the record
                alert(`Изтриване на финансов запис с ID: ${id}`);
                
                // Simulate deletion - hide the detail card
                const detailCard = this.closest('.detail-card');
                if (detailCard) {
                    detailCard.style.opacity = '0.5';
                    detailCard.style.transform = 'scale(0.95)';
                    setTimeout(() => {
                        detailCard.style.display = 'none';
                    }, 300);
                }
            }
        });
    });
    
    // Back button
    const backButtons = document.querySelectorAll('.btn-back');
    backButtons.forEach(button => {
        button.addEventListener('click', function(e) {
            e.preventDefault();
            console.log('Navigating back to finance list');
            
            // Add visual feedback
            this.style.transform = 'scale(0.95)';
            setTimeout(() => {
                this.style.transform = '';
            }, 150);
            
            // Here you would typically navigate back to the list
            // For now, just scroll to the finance section
            const financeSection = document.querySelector('#finance');
            if (financeSection) {
                financeSection.scrollIntoView({ 
                    behavior: 'smooth',
                    block: 'start'
                });
            }
        });
    });
    
    // Add hover effects for detail buttons
    const detailButtons = document.querySelectorAll('.btn-edit-detail, .btn-delete, .btn-back');
    detailButtons.forEach(button => {
        button.addEventListener('mouseenter', function() {
            this.style.transform = 'translateY(-2px)';
        });
        
        button.addEventListener('mouseleave', function() {
            this.style.transform = '';
        });
    });
    
    // Keyboard navigation for detail section
    document.addEventListener('keydown', (e) => {
        if (e.target.closest('.finance-detail-section')) {
            if (e.key === 'Escape') {
                // Go back when Escape is pressed
                const backButton = document.querySelector('.btn-back');
                if (backButton) {
                    backButton.click();
                }
            }
        }
    });
});